{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Echo",
	"scopeName": "source.echo",
	"patterns": [
        {
            "include": "#comments"
        },
		{
			"include": "#keywords"
		},
        {
            "include": "#namespaces"
        },
		{
			"include": "#types"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#constants"
		},
        {
            "include": "#support"
        },
        {
			"match": ";",
			"name": "punctuation.terminator.expression.php"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
                {
                    "name": "keyword.control.eco",
                    "match": "\\b(if|else|while|for|return)\\b"
                },
                {
					"name": "keyword.operator.arithmetic.eco",
					"match": "\\+|-|\\*\\*|\\*|/|%|\\+\\+|--"
				}
            ]
		},
        "types": {
            "patterns": [
                {
                    "name": "storage.type.eco",
                    "match": "\\b(void|bool|float|double|float(32|64)|u?int(8|16|32|64|128)?)\\b"
                },
                {
                    "name": "storage.type.complex.eco",
                    "match": "\\b(function|class|struct|extern|operator|constructor|destructor)\\b"
                },
                {
                    "name": "storage.modifier.eco",
                    "match": "\\b(const|public|private|protected|static|as)\\b"
                }
            ]
        },
		"strings": {
			"name": "string.quoted.double.eco",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.eco",
					"match": "\\\\."
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.eco",
					"match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
				}
			]
		},
		"constants": {
			"patterns": [
				{
                    "name": "constant.numeric.decimal.eco",
                    "match": "\\b\\d+(\\.\\d+)?(f)?\\b",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.decimal.value.eco"
                        },
                        "2": {
                            "name": "constant.numeric.decimal.suffix.float32.eco"
                        }
                    }
                },
                {
					"match": "0[xX][0-9a-fA-F]+(?:_[0-9a-fA-F]+)*",
					"name": "constant.numeric.hex.eco"
				},
				{
					"match": "0[bB][01]+(?:_[01]+)*",
					"name": "constant.numeric.binary.eco"
				},
                {
                    "name": "constant.language.eco",
                    "match": "\\b(true|false|null)\\b"
                }
			]
		},
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.eco",
                    "match": "//.*"
                },
                {
                    "name": "comment.block.eco",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "name": "support.function.std.eco",
                    "match": "\\b(echo|debug|fatal|ptr)\\b"
                }
            ]
        },
        "namespaces": {
            "patterns": [
                {
                    "name": "entity.name.namespace.eco",
                    "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=::)"
                },
                {
                    "name": "punctuation.separator.namespace.eco",
                    "match": "::"
                },
                {
                    "name": "entity.name.symbol.eco",
                    "match": "(?<=::)\\b[A-Za-z_][A-Za-z0-9_]*\\b"
                }
            ]
        }
	}
}